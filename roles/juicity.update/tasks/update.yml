---
- name: Fetch latest run_id from the given build_type
  block:
    - name: Fetch latest run_id from the given build_type
      github_workflow_run:
        owner: "{{ owner }}"
        repo: "{{ app }}"
        build_type: "{{ build_type }}"
      delegate_to: localhost
      register: result
      become: false
    - name: Extract run_id from outputs
      set_fact:
        run_id: "{{ result.run_id }}"
  when:
    - build_type is defined
    - latest
    - action_url is not defined

- name: Extract run_id from action_url
  set_fact:
    run_id: "{{ action_url | split('/') | last }}"
  when:
    - action_url is defined
    - build_type == "custom"

- name: Remove artifacts from /tmp/{{ app }}
  block:
    - name: Find files and subdirectories
      ansible.builtin.find:
        paths: "/tmp/{{ app }}"
        recurse: yes
        file_type: any
      register: found_items

    - name: Remove artifacts
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items: "{{ found_items.files }}"
      when: found_items.matched > 0

- name: Download binary from GitHub Actions
  get_url:
    url: "{{ base_url }}/{{ run_id }}/{{ app }}-linux-x86_64.zip"
    dest: "/tmp/{{ app }}/{{ app }}-linux-x86_64.zip"
  register: download
  when:
    - build_type != "release"

- name: Download binary from GitHub Releases
  get_url:
    url: "{{ release_base_url }}/{{ release_tag }}/{{ app }}-linux-x86_64.zip"
    dest: "/tmp/{{ app }}/{{ app }}-linux-x86_64.zip"
  register: download
  when:
    - build_type == "release"
    - release_tag != "na"

- name: Unzip binary
  unarchive:
    remote_src: yes
    src: "/tmp/{{ app }}/{{ app }}-linux-x86_64.zip"
    dest: "/tmp/{{ app }}"

- name: Copy binary
  copy:
    remote_src: yes
    src: "/tmp/{{ app }}/{{ binary }}"
    dest: "/usr/bin/{{ binary }}"
    mode: a+x

- name: Restart systemd service
  systemd:
    name: "{{ systemd_service }}"
    state: restarted

- name: Verify version
  block:
    - name: Verify version
      shell: "{{ binary }} --version"
      register: version
    - name: Print output
      debug:
        msg: "{{ version.stdout }}"
